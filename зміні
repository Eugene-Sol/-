/// https://practice.course.rs/variables.html
1.
 fn main() {
    let x: i32 = 5; // Ініціалізуємо x значенням 5
    let y: i32; // y все ще не використовується, це тільки попередження

    assert_eq!(x, 5);
    println!("Success!");
}
2.
 fn main() {
    let mut x = 1; // Оголошуємо x як змінну змінну
    x += 2; 
    
    assert_eq!(x, 3);
    println!("Success!");
}
3.
 fn main() {
    let x: i32 = 10;
    let y: i32 = 5; // Переміщуємо у сюди, щоб вона була доступна скрізь

    {
        println!("The value of x is {} and value of y is {}", x, y);
    }
    println!("The value of x is {} and value of y is {}", x, y); 
}
4.
 fn main() {
    let x = define_x(); // Привласнюємо значення, що повертається функцією define_x, змінною x
    println!("{}, world", x); 
}

 fn define_x() -> &'static str { // Повертаємо рядковий літерал
    let x = "hello";
    x
}
5.
 fn main() {
    let x: i32 = 5;
    {
        let x = 12;
        assert_eq!(x, 12); // Усередині цього блоку x = 12
    }

    assert_eq!(x, 5); // За межами внутрішнього блоку x все ще = 5

    let x = 42;
    println!("{}", x); // друкує "42".
}
6.
 fn main() {
    let mut x: i32 = 1;
    x = 7;
    // Shadowing and re-binding
    let x = x; 
    // x += 3; // Видаляємо цей рядок, так як x більше не змінна змінна

    let y = 4;
    // Shadowing
    let y = "I can also be bound to text!"; 

    println!("Success!");
}
7.
 fn main() {
    let x = 1; 
    println!("{}", x); // Використовуємо змінну x
}
8.
 fn main() {
    let (x, y) = (1, 2);
    let x = x + 2; // Shadowing: перевизначаємо x

    assert_eq!(x, 3);
    assert_eq!(y, 2);

    println!("Success!");
}
9.
 fn main() {
    let (x, y);
    (x, ..) = (3, 4);
    [.., y] = [1, 2];
    
  // Заповнюємо перепустку так, щоб твердження було правильним
    assert_eq!([x, y], [3, 2]);

    println!("Success!");
}
